from langchain_core.output_parsers import PydanticOutputParser, StrOutputParser
from langgraph.graph import START, END, StateGraph, MessagesState
from langgraph.graph.message import AnyMessage, add_messages
from langchain_gigachat import GigaChat
from langchain.prompts import ChatPromptTemplate
from pydantic import BaseModel, Field
from langgraph.types import Command
from typing import List, Dict
from tavily import TavilyClient

class GraphsState(MessagesState):
    last_reason: str = ""
    user_question: str = ""
    last_answer: str = ""
    critique: List[str] = []
    final_decision: str = ""
    final_answer: str = ""
    search_query: str = ""
    search_results: Dict = {}

graph = StateGraph(GraphsState)

llm = GigaChat(model="GigaChat-2-Max",
                verify_ssl_certs=False,
                profanity_check=False,
                # base_url="https://gigachat.sberdevices.ru/v1",
                streaming=True,
                max_tokens=8000,
                # temperature=1,
                timeout=600)

REASONER_TEMPLATE = """–¢—ã - –∞–≥–µ–Ω—Ç-–∞–Ω–∞–ª–∏—Ç–∏–∫, –∫–æ—Ç–æ—Ä—ã–π –æ–±–¥—É–º—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞—á–∞—Ç—å –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –Ω–µ–≥–æ.
–ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –æ —Ç–æ–º, –∫–∞–∫ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–ü–æ–¥—É–º–∞–π, –ø–æ—á–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç —Ç–∞–∫–æ–π –≤–æ–ø—Ä–æ—Å.
–ö–∞–∫ —Ç—ã –º–æ–∂–µ—à—å –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ –Ω–∞–∏–ª—É—á—à–∏–º –æ–±—Ä–∞–∑–æ–º?
–ß—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é? –≠—Ç–æ—Ç –ª–∏ –≤–æ–ø—Ä–æ—Å –æ–Ω –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ —Ö–æ—Ç–µ–ª –∑–∞–¥–∞—Ç—å? –ù–∞–ø–∏—à–∏ —Å–≤–æ–∏ –º—ã—Å–ª–∏ –ø–æ —ç—Ç–∏–º –≤–æ–ø—Ä–æ—Å–∞–º.
–£—á—Ç–∏, —á—Ç–æ —É —Ç–µ–±—è –±—É–¥–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, —Ç–∞–∫ —á—Ç–æ —É—á–∏—Ç—ã–≤–∞–π —ç—Ç–æ –ø—Ä–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏. –ù–æ –Ω–µ –∏—â–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –≤ —Å–∏—Ç—É–∞—Ü–∏–∏, –µ—Å–ª–∏ —Ç—ã —Å–∞–º –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç.
–ï—Å–ª–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ç—Ä–µ–±—É–µ—Ç—Å—è —É–∑–Ω–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Ç–æ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Å—è –ø–æ–∏—Å–∫–æ–º, —Ç–∞–∫ —Ç–≤–æ–∏ –∑–Ω–∞–Ω–∏—è –º–æ–≥—É—Ç –Ω–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–±—ã—Ç–∏—è—Ö.

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {user_question}
"""

def reason(state: GraphsState):
    prompt = ChatPromptTemplate.from_messages([
        ("system", REASONER_TEMPLATE)
    ])

    chain = prompt | llm | StrOutputParser()

    res = chain.invoke(
        {
            "user_question": state['user_question'],
        }
    )

    return {"last_reason": res}


class FirstStep(BaseModel):
    """–û–ø–∏—Å–∞–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    search_query: str = Field(description="–¢–µ–∫—Å—Ç –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω")
    final_decision: str = Field(description="–ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: ")



FIRST_STEP_TEMPLATE = """–¢—ã –∞–≥–µ–Ω—Ç-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –¥–æ–ª–∂–µ–Ω –æ–ø—Ä–µ–¥–ª–∏—Ç—å –∫–∞–∫–æ–π –ø–µ—Ä–≤—ã–π —à–∞–≥ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–¢—ã –¥–æ–ª–∂–µ–Ω –≤—ã–±—Ä–∞—Ç—å, –∫–∞–∫–æ–π –∞–≥–µ–Ω—Ç –¥–æ–ª–∂–µ–Ω –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É –Ω–∞–¥ –≤–æ–ø—Ä–æ—Å–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {user_question}

–¢–≤–æ–∏ –º—ã—Å–ª–∏ –ø–æ –ø–æ–≤–æ–¥—É –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
<THINK>
{last_reason}
</THINK>

–í—ã–±—Ä–∞—Ç—å –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ - –∫–∞–∫—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤—ã–∑–≤–∞—Ç—å, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞–∏–ª—É—á—à–∏–º –æ–±—Ä–∞–∑–æ–º.
1. finalize - –æ—Ç–≤–µ—Ç–∏—Ç –∞–≥–µ–Ω—Ç-—Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü—Ç–æ—Ä, —Ç–∞–∫ –∫–∞–∫ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —É–∂–µ –µ—Å—Ç—å –∏–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—Å—Ç–æ–π –∏ –ø–æ–Ω—è—Ç–Ω—ã–π –∏ –º—ã –≥–æ—Ç–æ–≤—ã –æ—Ç–≤–µ—Ç–∏—Ç—å.
2. search - –¥–æ–ª–∂–µ–Ω –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –∞–≥–µ–Ω—Ç-–ø–æ–∏—Å–∫–æ–≤–∏–∫
3. writer - —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ä–∞–±–æ—Ç–∞ –∞–≥–µ–Ω—Ç–∞-–ø–æ–º–æ—à–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø–∏—à–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤ –¥–∞–ª—å–Ω–µ–π—à–µ–º –±—É–¥–µ—Ç –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∫—Ä–∏—Ç–∏–∫–æ–º.

–í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{format_instructions}"""


def first_step(state: GraphsState):
    parser = PydanticOutputParser(pydantic_object=FirstStep)
    prompt = ChatPromptTemplate.from_messages([
        ("system", FIRST_STEP_TEMPLATE)
    ]).partial(format_instructions=parser.get_format_instructions())

    chain = prompt | llm | parser

    res = chain.invoke(
        {
            "user_question": state["user_question"],
            "last_reason": state["last_reason"],
        }
    )

    final_decision = res.final_decision
    search_query = res.search_query
    update = {"final_decision": final_decision, "search_query": search_query}
    goto = "üèÅ Finalizer"

    if final_decision == "search" and search_query is not None and len(search_query) > 0:
        goto = "üîç Searcher"
    if final_decision == "writer":
        goto = "üë® Writer"

    return Command(
        update=update,
        goto=goto
    )

ANSWER_TEMPLATE = """–¢—ã - –∞–≥–µ–Ω—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ò–∑—É—á–∏ —Å–≤–æ–∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –º—ã—Å–ª–∏ –∏ –æ—Ç–≤–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å —Å —É—á–µ—Ç–æ–º —Å–≤–æ–∏—Ö –º—ã—Å–ª–µ–π.
–ò–ª–∏, –µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–∏—Å–∫, –Ω–∞–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –≤–æ–ø—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–æ–∏—Å–∫–æ–º, —É —Ç–µ–±—è –±—É–¥–µ—Ç –≤–æ–∑–º–æ–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∏—Ç—å –ø–æ—Å–ª–µ.

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {user_question}

–¢–≤–æ–∏ –º—ã—Å–ª–∏ –ø–æ –ø–æ–≤–æ–¥—É –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
<THINK>
{last_reason}
</THINK>

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å):
<SEARCH_RESULTS>
{search_results}
</SEARCH_RESULTS>

–¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
"""

def answer(state: GraphsState):
    prompt = ChatPromptTemplate.from_messages([
        ("system", ANSWER_TEMPLATE)
    ])

    chain = prompt | llm | StrOutputParser()

    res = chain.invoke(
        {
            "user_question": state["user_question"],
            "last_reason": state["last_reason"],
            "search_results": state.get("search_results", {})
        }
    )

    return {"last_answer": res}


class Critique(BaseModel):
    """–ö—Ä–∏—Ç–∏–∫–∞ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è"""

    thoughts: str = Field(description="–ú—ã—Å–ª–∏ –ø–æ –ø–æ–≤–æ–¥—É –æ—Ç–≤–µ—Ç–∞")
    critique: str = Field(description="–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω–∞—è –∫—Ä–∏—Ç–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞ - —á—Ç–æ –Ω—É–∂–Ω–æ –ø–æ–ø—Ä–∞–≤–∏—Ç—å –∏–ª–∏ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å")
    search_query: str = Field(description="–¢–µ–∫—Å—Ç –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω")
    final_decision: str = Field(description="–ò—Ç–æ–≥–æ–≤–æ–µ —Ä–µ—à–µ–Ω–∏–µ, –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–¥–Ω–æ –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö: good (–µ—Å–ª–∏ –Ω–µ—Ç –Ω–æ–≤–æ–π –∫—Ä–∏—Ç–∏–∫–∏, –µ—Å—Ç—å –æ—Ç—Ä—ã–≤–∫–∏ –∏–∑ –∫–Ω–∏–≥ –∏ —Ä–µ—á—å –º–æ–∂–Ω–æ —Å—á–∏—Ç–∞—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ–π), search (—Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ), fix (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å –∏–ª–∏ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç)")



CRITIQUE_TEMPLATE = """–¢—ã - –∞–≥–µ–Ω—Ç-–∫—Ä–∏—Ç–∏–∫. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –æ—Ü–µ–Ω–∏—Ç—å –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–∏–Ω—è—Ç—å —Ä–µ—à–µ–Ω–∏–µ - —á—Ç–æ —Å –Ω–∏–º –¥–µ–ª–∞—Ç—å.
–û—Ç–≤–µ—á–∞—Ç—å, –ø–µ—Ä–µ–ø–∏—Å–∞—Ç—å, –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–ø—Ä–æ—Å–∏—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ.
–ï—Å–ª–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –Ω—É–∂–µ–Ω –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ - –ø—Ä–∏–º–∏ —Ä–µ—à–µ–Ω–∏–µ search –∏ –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω.

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {user_question}

–¢–≤–æ–∏ –º—ã—Å–ª–∏ –ø–æ –ø–æ–≤–æ–¥—É –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
<THINK>
{last_reason}
</THINK>

–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º—ã–π –æ—Ç–≤–µ—Ç:
<LAST_ANSWER>
{last_answer}
</LAST_ANSWER>

–ü—Ä–µ–¥—ã–¥—É—â–∏–π –Ω–∞–±–æ—Ä –∫—Ä–∏—Ç–∏–∫–∏, –∫–æ—Ç–æ—Ä—É—é —Ç—ã —É–∂–µ –ø–∏—Å–∞–ª —Ä–∞–Ω—å—à–µ (–Ω–µ –ø–æ–≤—Ç–æ—Ä—è–π—Å—è):
<OLD_CRITIQUE>
{old_critique}
</OLD_CRITIQUE>

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å):
<SEARCH_RESULTS>
{search_results}
</SEARCH_RESULTS>

–í—ã–≤–µ–¥–∏ —Ç–æ–ª—å–∫–æ —Å–ª–µ–¥—É—é—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:
{format_instructions}"""


def critique(state: GraphsState):
    parser = PydanticOutputParser(pydantic_object=Critique)
    prompt = ChatPromptTemplate.from_messages([
        ("system", CRITIQUE_TEMPLATE)
    ]).partial(format_instructions=parser.get_format_instructions())

    chain = prompt | llm | parser

    res = chain.invoke(
        {
            "user_question": state["user_question"],
            "last_reason": state["last_reason"],
            "last_answer": state["last_answer"],
            "old_critique": state.get("critique", []),
            "search_results": state.get("search_results", {})
        }
    )

    final_decision = res.final_decision
    critique = res.critique
    search_query = res.search_query
    new_critique = state.get("critique", [])
    if new_critique is None:
        new_critique = []
    new_critique = new_critique.append(critique)


    update = {"final_decision": final_decision, "critique": new_critique, "search_query": search_query}
    goto = "üèÅ Finalizer"

    if final_decision == "search" and search_query is not None and len(search_query) > 0:
        goto = "üîç Searcher"

    return Command(
        update=update,
        goto=goto
    )

FINALIZER_TEMPLATE = """–¢—ã - –∞–≥–µ–Ω—Ç-–≤—ã–ø—É—Å–∫–∞—é—â–∏–π —Ä–µ–¥–∞–∫—Ç–æ—Ä.
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –Ω–∞–ø–∏—Å–∞—Ç—å –æ–∫–æ–Ω—á–∞—Ç–µ–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º –∫—Ä–∏—Ç–∏–∫–∏ –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∏ —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏–π. 

–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - {user_question}

–¢–≤–æ–∏ –º—ã—Å–ª–∏ –ø–æ –ø–æ–≤–æ–¥—É –≤–æ–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
<THINK>
{last_reason}
</THINK>

–ü–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º–æ–≥–æ –æ—Ç–≤–µ—Ç–∞:
<LAST_ANSWER>
{last_answer}
</LAST_ANSWER>

–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å):
<SEARCH_RESULTS>
{search_results}
</SEARCH_RESULTS>

–ö—Ä–∏—Ç–∏–∫–∞ —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏ –æ—Ç–≤–µ—Ç–∞:
<CRITICUE>
{critique}
</CRITICUE>

–ù–∞–ø–∏—à–∏ —Ñ–∏–Ω–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—á–µ—Ç–∫–æ –∏ —è—Å–Ω–æ):
"""

def finalize(state: GraphsState):
    prompt = ChatPromptTemplate.from_messages([
        ("system", FINALIZER_TEMPLATE)
    ])

    chain = prompt | llm | StrOutputParser()

    res = chain.invoke(
        {
            "user_question": state.get("user_question", None),
            "last_reason": state.get("last_reason", None),
            "critique": state.get("critique", None),
            "last_answer": state.get("last_answer", None),
            "search_results": state.get("search_results", {})
        }
    )

    return {"final_answer": res}

def search(state: GraphsState):
    tavily_client = TavilyClient()
    response = tavily_client.search(state["search_query"])
    search_results = state.get("search_results", {})
    search_results[state["search_query"]] = response
    return {"search_results": search_results}


graph.add_node("ü§î Thinker", reason)
graph.add_node("1Ô∏è‚É£ First step", first_step)
graph.add_node("üë® Writer", answer)
graph.add_node("üë®‚Äç‚öñÔ∏è Critique", critique)
graph.add_node("üîç Searcher", search)
graph.add_node("üèÅ Finalizer", finalize)


graph.add_edge(START, "ü§î Thinker")
graph.add_edge("ü§î Thinker", "1Ô∏è‚É£ First step")
graph.add_edge("üë® Writer", "üë®‚Äç‚öñÔ∏è Critique")
graph.add_edge("üîç Searcher", "üë® Writer")
graph.add_edge("üèÅ Finalizer", END)



graph_runnable = graph.compile()
